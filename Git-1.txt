# Git Version Control System (VCS) and Terminology

**Git** is a distributed version control system (DVCS) that provides a framework for managing and tracking changes in source code during software development. It enables multiple developers to work collaboratively on a project, maintaining a comprehensive history of changes and versions. Git offers the following key features, making it a crucial tool for companies:

## Functions of a VCS:

1. **Simultaneous Collaboration:**
    - Enables developers to work concurrently on a project.
2. **Conflict Prevention:**
    - Prevents overwriting each other's changes, ensuring smooth collaboration.
3. **Version History Maintenance:**
    - Maintains a comprehensive history of every version of the project.

## Types of VCS:

1. **Centralized Version Control System (CVCS):**
    - Example: SVN
    - Uses a central server for storing files and facilitates team collaboration.
    - Vulnerable to a single point of failure â€“ if the central server is down, collaboration halts.
2. **Distributed/Decentralized Version Control System (DVCS):**
    - Example: Git
    - Overcomes CVCS drawbacks by not relying on a central server.
    - Full mirroring of the repository allows any client to restore the server if it goes down.

## Git Terminology:

- **Repository:**
    - A collection of project files for a specific area, each project having its own repository.
    - Hosted on platforms like GitHub, which can have numerous repositories.
- **Cloning:**
    - Copying a remote repository to a local machine.
    - Example: `git clone <https://github.com/username/repo.git`>
- **Fork:**
    - Copying projects from one account to another, commonly used on platforms like GitHub.
- **Local Repository:**
    - A copy of a remote repository on a local machine.
- **Remote Repository:**
    - The repository hosted on a server, such as GitHub.
- **Push:**
    - Sending local repository changes to the remote repository.
- **Pull:**
    - Bringing remote repository changes to the local repository.
